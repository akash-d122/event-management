name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        test-suite:
          - unit
          - integration
          - edge-cases
          - concurrent

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: |
        # Create test database
        PGPASSWORD=postgres createdb -h localhost -U postgres event_management_test
        
        # Run database migrations
        npm run migrate:up

    - name: Run ${{ matrix.test-suite }} tests
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: |
        case "${{ matrix.test-suite }}" in
          "unit")
            npm run test -- tests/unit/
            ;;
          "integration")
            npm run test -- tests/integration/
            ;;
          "edge-cases")
            npm run test -- tests/edge-cases/
            ;;
          "concurrent")
            npm run test -- tests/concurrent/
            ;;
        esac

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          coverage/
          junit.xml
        retention-days: 30

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: |
        PGPASSWORD=postgres createdb -h localhost -U postgres event_management_test
        npm run migrate:up

    - name: Run all tests with coverage
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: npm run test:coverage

    - name: Generate coverage reports
      run: node tests/coverage/coverageSetup.js

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: coverage/coverage-summary.md

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx audit-ci --moderate

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: |
        PGPASSWORD=postgres createdb -h localhost -U postgres event_management_test
        npm run migrate:up

    - name: Run performance tests
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: event_management_test
        NODE_ENV: test
        JWT_SECRET: test-secret-key-for-ci
      run: npm run test -- tests/concurrent/ --verbose

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          coverage/
          performance-report.json
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Build application
      run: |
        # Create production build directory
        mkdir -p dist
        
        # Copy source files
        cp -r src/ dist/
        cp -r database/ dist/
        cp package*.json dist/
        
        # Install production dependencies in dist
        cd dist && npm ci --only=production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, docker deploy, cloud deployment, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, coverage, security, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.coverage.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "‚úÖ All checks passed successfully!"
        # Add notification logic (Slack, email, etc.)

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.coverage.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå Some checks failed!"
        # Add failure notification logic
